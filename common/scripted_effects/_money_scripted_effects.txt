# MONEY SYSTEM #
# example usage:
## calculate_money_balance = yes
calculate_startup_money_balance = {
	set_variable = { total_balance_var = 0 }

	# Income:
	calculate_money_income = yes

	# Expenses:
	calculate_money_expenses = yes

	# Balance:
	add_to_variable = { total_balance_var = total_income_var }
	add_to_variable = { total_balance_var = total_expenses_var }
}

# example usage:
## calculate_money_balance = yes
calculate_money_balance = {
	set_variable = { total_balance_var = 0 }

	# Income:
	calculate_money_income = yes

	# Expenses:
	calculate_money_expenses = yes

	# Balance:
	add_to_variable = { total_balance_var = total_income_var }
	add_to_variable = { total_balance_var = total_expenses_var }

	if = {
		limit = {
			OR = {
				check_variable = { money < 2000000 }
				NOT = { check_variable = { total_balance_var > 0 } }
			}
			OR = {
				check_variable = { money > -2000000 }
				NOT = { check_variable = { total_balance_var < 0 } }
			}
		}
		set_temp_variable = { gained_money = total_balance_var }
		add_to_variable = { money = gained_money }
	}
	if = {
		limit = {
			check_variable = { money > 2000000 }
		}
		set_variable = { money = 2000000 }
	}
	else_if = {
		limit = {
			check_variable = { money < -2000000 }
		}
		set_variable = { money = -2000000 }
	}
}

# example usage:
## calculate_money_income = yes
calculate_money_income = {
	set_variable = { total_income_var = 0 }

	if = {
		limit = { tag = PRS }
		log = "[GetDateText], Running calculate_money_income"
	}

	# Taxes
	set_temp_variable = { income_from_our_taxes = 0 }
	set_temp_variable = { income_from_our_taxes_core = 0 }
	set_temp_variable = { income_from_our_taxes_non_core = 0 }
	hidden_effect = {
		every_owned_state = {
			if = {
				limit = {
					is_core_of = PREV
				}
				add_to_temp_variable = { income_from_our_taxes_core = state_population_k }
			}
			else_if = {
				limit = {
					NOT = { is_core_of = PREV }
				}
				add_to_temp_variable = { income_from_our_taxes_non_core = state_population_k }
			}
		}
	}
	divide_temp_variable = { income_from_our_taxes_core = 9000 }
	divide_temp_variable = { income_from_our_taxes_non_core = 300000 }
	add_to_temp_variable = { income_from_our_taxes = income_from_our_taxes_core }
	add_to_temp_variable = { income_from_our_taxes = income_from_our_taxes_non_core }
	multiply_temp_variable = { income_from_our_taxes = 7 } # money is now weekly
	if = {
		limit = {
			check_variable = { income_from_our_taxes < 0 }
		}
		set_temp_variable = { income_from_our_taxes = 2147483 }
	}

	# Tax Affecting Modifiers:
	calculate_tax_modifiers = yes

	# Consumer Goods Factories:																										# Example: Prussia
	set_temp_variable = { income_from_our_consumer_goods_factories = num_of_civilian_factories }									# 10 total civs at game start						= income 10
	multiply_temp_variable = { income_from_our_consumer_goods_factories = modifier@consumer_goods_expected_value }					# Expected civs at game start 30% (10 x 0.3) 		= income 3
	round_temp_variable = income_from_our_consumer_goods_factories																	# Nothing to round here								= income 3
	if = {
		limit = {
			check_variable = { income_from_our_consumer_goods_factories < 0 }
		}
		set_temp_variable = { income_from_our_consumer_goods_factories = 0 }
	}
	multiply_temp_variable = { income_from_our_consumer_goods_factories = 0.3 }														# Income decreased to one third (3 x 0.3)			= income 0.9
	multiply_temp_variable = { income_from_our_consumer_goods_factories = 3 } # money is now weekly									# Income increased by three (0.3 x 3)				= income 2.7

	# Consumer Goods Factories Modifiers:
	calculate_consumer_goods_modifiers = yes																						# There are modifiers that modify the total income from civs, read below.

	# Free Civilian Factories:
	set_temp_variable = { income_from_our_free_civilian_factories = num_of_available_civilian_factories }
	multiply_temp_variable = { income_from_our_free_civilian_factories = 0.08 }
	multiply_temp_variable = { income_from_our_free_civilian_factories = 3 } # money is now weekly
	add_to_variable = { total_income_var = income_from_our_free_civilian_factories }

	# Possible income from tariffs:
	#if = {
	#	limit = {
	#		num_of_factories > num_of_owned_factories
	#	}
	#	set_temp_variable = { income_from_tariffs = num_of_factories }
	#	subtract_from_temp_variable = { income_from_tariffs = num_of_owned_factories }
	#	if = {
	#		limit = {
	#			has_idea = free_trade
	#		}
	#		multiply_temp_variable = { income_from_tariffs = 0.05 }
	#	}
	#	else_if = {
	#		limit = {
	#			has_idea = export_focus
	#		}
	#		multiply_temp_variable = { income_from_tariffs = 0.15 }
	#	}
	#	else_if = {
	#		limit = {
	#			has_idea = limited_exports
	#		}
	#		multiply_temp_variable = { income_from_tariffs = 0.3 }
	#	}
	#	else_if = {
	#		limit = {
	#			has_idea = closed_economy
	#		}
	#		multiply_temp_variable = { income_from_tariffs = 0.75 }
	#	}
	#}
	#add_to_variable = { total_income_var = income_from_tariffs }

	# Possible income from trading goods:
	#set_temp_variable = { income_from_trading_natural_resources = resource_exported@cotton }
	#add_to_temp_variable = { income_from_trading_natural_resources = resource_exported@wood }
	#multiply_temp_variable = { income_from_trading_natural_resources = 0.02 }
	#
	#set_temp_variable = { income_from_trading_minerals = resource_exported@coal }
	#add_to_temp_variable = { income_from_trading_minerals = resource_exported@iron }
	#multiply_temp_variable = { income_from_trading_minerals = 0.04 }
	#
	#set_temp_variable = { income_from_refined_materials = resource_exported@steel }
	#add_to_temp_variable = { income_from_refined_materials = resource_exported@fabric }
	#multiply_temp_variable = { income_from_refined_materials = 0.08 }
	#
	#set_temp_variable = { income_from_manufactured_goods = resource_exported@machine_parts }
	#multiply_temp_variable = { income_from_manufactured_goods = 0.16 }
	#
	#set_temp_variable = { income_from_trading_goods = income_from_trading_natural_resources }
	#add_to_temp_variable = { income_from_trading_goods = income_from_trading_minerals }
	#add_to_temp_variable = { income_from_trading_goods = income_from_refined_materials }
	#add_to_temp_variable = { income_from_trading_goods = income_from_manufactured_goods }
	#
	#if = {
	#	limit = {
	#		has_idea = free_trade
	#	}
	#	multiply_temp_variable = { income_from_trading_goods = 0.05 }
	#}
	#else_if = {
	#	limit = {
	#		has_idea = export_focus
	#	}
	#	multiply_temp_variable = { income_from_trading_goods = 0.15 }
	#}
	#else_if = {
	#	limit = {
	#		has_idea = limited_exports
	#	}
	#	multiply_temp_variable = { income_from_trading_goods = 0.3 }
	#}
	#else_if = {
	#	limit = {
	#		has_idea = closed_economy
	#	}
	#	multiply_temp_variable = { income_from_trading_goods = 0.75 }
	#}
	#add_to_variable = { total_income_var = income_from_trading_goods }

	# Other Income:
	set_temp_variable = { income_from_other_sources = modifier@money_income }
	if = {
		limit = {
			check_variable = { income_from_other_sources < 0 }
		}
		set_temp_variable = { income_from_other_sources = 0 }
	}
	add_to_variable = { total_income_var = income_from_other_sources }

	# Income Affecting Modifiers:
	calculate_money_income_modifiers = yes
}

# example usage:
## calculate_tax_modifiers = yes
calculate_tax_modifiers = {
	# Tax Modifiers:
	set_temp_variable = { tax_efficiency_modifier = 1 }
	add_to_temp_variable = { tax_efficiency_modifier = modifier@tax_efficiency_factor }
	if = {
		limit = {
			check_variable = { tax_efficiency_modifier < 0 }
		}
		set_temp_variable = { tax_efficiency_modifier = 0 }
	}
	multiply_temp_variable = { income_from_our_taxes = tax_efficiency_modifier }
	add_to_variable = { total_income_var = income_from_our_taxes }

	# Setting Display Variable:
	set_temp_variable = { tax_modifier = modifier@tax_efficiency_factor }
	set_temp_variable = { tax_modifier_from_ideas = modifier@tax_efficiency_factor_from_ideas }
	set_temp_variable = { tax_modifier_from_decisions = modifier@tax_efficiency_factor_from_decisions }
	set_temp_variable = { tax_modifier_from_other = tax_modifier }
	subtract_from_temp_variable = { tax_modifier_from_other = tax_modifier_from_ideas }
	subtract_from_temp_variable = { tax_modifier_from_other = tax_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { tax_modifier < -1 }
		}
		set_temp_variable = { tax_modifier = -1 }
	}
}

# example usage:
## calculate_consumer_goods_modifiers = yes
calculate_consumer_goods_modifiers = {
	# Consumer Goods Factories Modifiers:																							# Example: Prussia
	set_temp_variable = { consumer_goods_income_modifier = 1 }																		# Income modifier at start = 1 (no change at all)	= income modified by 1
	add_to_temp_variable = { consumer_goods_income_modifier = modifier@consumer_goods_income_factor }								# Income modified by consumer goods income factors (read below):
	if = {																															# Prussia has two ideas that increase the income from civ factories by
		limit = {																													# 5% (Zollverein) and 10% (Gewerbefreiheit) respectively - the income modifier is 1.15
			check_variable = { consumer_goods_income_modifier < 0 }
		}
		set_temp_variable = { consumer_goods_income_modifier = 0 }
	}
	multiply_temp_variable = { income_from_our_consumer_goods_factories = consumer_goods_income_modifier }							# Current income of 2.7 is modified by the factors from ideas etc. - 2.7 x 1.15 = 3.105
	add_to_variable = { total_income_var = income_from_our_consumer_goods_factories }											# Income of 3.105 is added to the total income

	# Setting Display Variable:
	set_temp_variable = { consumer_goods_modifier = modifier@consumer_goods_income_factor }
	set_temp_variable = { consumer_goods_modifier_from_ideas = modifier@consumer_goods_income_factor_from_ideas }
	set_temp_variable = { consumer_goods_modifier_from_decisions = modifier@consumer_goods_income_factor_from_decisions }
	set_temp_variable = { consumer_goods_modifier_from_other = consumer_goods_modifier }
	subtract_from_temp_variable = { consumer_goods_modifier_from_other = consumer_goods_modifier_from_ideas }
	subtract_from_temp_variable = { consumer_goods_modifier_from_other = consumer_goods_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { consumer_goods_modifier < -1 }
		}
		set_temp_variable = { consumer_goods_modifier = -1 }
	}
}

# example usage:
## calculate_money_income_modifiers = yes
calculate_money_income_modifiers = {
	# Calculation:
	set_temp_variable = { income_modifier_calculation = 1 }

	# Other Sources:
	add_to_temp_variable = { income_modifier_calculation = modifier@money_income_factor }

	if = {
		limit = {
			check_variable = { income_modifier_calculation < 0 }
		}
		set_temp_variable = { income_modifier_calculation = 0 }
	}
	multiply_variable = { total_income_var = income_modifier_calculation }

	# Setting Display Variable:
	set_temp_variable = { income_modifier = modifier@money_income_factor }
	set_temp_variable = { income_modifier_from_ideas = modifier@money_income_factor_from_ideas }
	set_temp_variable = { income_modifier_from_decisions = modifier@money_income_factor_from_decisions }
	set_temp_variable = { income_modifier_from_other = income_modifier }
	subtract_from_temp_variable = { income_modifier_from_other = income_modifier_from_ideas }
	subtract_from_temp_variable = { income_modifier_from_other = income_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { income_modifier < -1 }
		}
		set_temp_variable = { income_modifier = -1 }
	}
}

# example usage:
## calculate_money_expenses = yes
calculate_money_expenses = {
	set_variable = { total_expenses_var = 0 }

	# Social Spending:
	set_temp_variable = { expenses_from_our_social_spending = 0 }
	hidden_effect = {
		every_owned_state = {
			limit = {
				is_core_of = PREV
			}
			add_to_temp_variable = { expenses_from_our_social_spending = state_population_k }
		}
	}
	divide_temp_variable = { expenses_from_our_social_spending = 2000 }
	multiply_temp_variable = { expenses_from_our_social_spending = -0.05 }
	multiply_temp_variable = { expenses_from_our_social_spending = 7 } # money is now weekly

	# Social Spending Affecting Modifiers:
	calculate_social_spending_modifiers = yes

	# Research and Education Spending:
	set_temp_variable = { expenses_from_our_research_spending = max_manpower_k }
	divide_temp_variable = { expenses_from_our_research_spending = 1000 }
	divide_temp_variable = { expenses_from_our_research_spending = 10 }
	multiply_temp_variable = { expenses_from_our_research_spending = -0.2 }
	multiply_temp_variable = { expenses_from_our_research_spending = amount_research_slots }
	multiply_temp_variable = { expenses_from_our_research_spending = 7 } # money is now weekly

	# Research and Education Spending Affecting Modifiers:
	calculate_research_spending_modifiers = yes

	# Army Spending:
	set_temp_variable = { expenses_from_our_army_spending = num_battalions }
	multiply_temp_variable = { expenses_from_our_army_spending = -0.003 }
	multiply_temp_variable = { expenses_from_our_army_spending = 7 } # money is now weekly

	# Army Spending Affecting Modifiers:
	calculate_army_spending_modifiers = yes

	# Navy Spending:
	set_temp_variable = { expenses_from_our_navy_spending = num_ships }
	multiply_temp_variable = { expenses_from_our_navy_spending = -0.003 }
	multiply_temp_variable = { expenses_from_our_navy_spending = 7 } # money is now weekly

	# Navy Spending Affecting Modifiers:
	calculate_navy_spending_modifiers = yes

	# Road Spending:
	set_temp_variable = { expenses_from_our_road_spending = 0 }
	hidden_effect = {
		every_owned_state = {
			limit = {
				is_core_of = PREV
			}
			add_to_temp_variable = { expenses_from_our_road_spending = infrastructure_level }
		}
	}
	multiply_temp_variable = { expenses_from_our_road_spending = -0.002 }
	multiply_temp_variable = { expenses_from_our_road_spending = 7 } # money is now weekly

	# Road Spending Affecting Modifiers:
	calculate_road_spending_modifiers = yes

	# Law Spending:
	set_temp_variable = { expenses_from_our_law_spending = max_manpower_k }
	divide_temp_variable = { expenses_from_our_law_spending = 1000 }
	divide_temp_variable = { expenses_from_our_law_spending = 10 }
	multiply_temp_variable = { expenses_from_our_law_spending = -0.2 }
	multiply_temp_variable = { expenses_from_our_law_spending = 7 } # money is now weekly

	# Law Spending Affecting Modifiers:
	calculate_law_spending_modifiers = yes

	# Used Military Factories:
	set_temp_variable = { expenses_from_our_used_mil_factories = num_of_military_factories }
	subtract_from_temp_variable = { expenses_from_our_used_mil_factories = num_of_available_military_factories }
	round_temp_variable = expenses_from_our_used_mil_factories
	multiply_temp_variable = { expenses_from_our_used_mil_factories = -0.085 }
	multiply_temp_variable = { expenses_from_our_used_mil_factories = 7 } # money is now weekly
	add_to_variable = { total_expenses_var = expenses_from_our_used_mil_factories }

	# Interests from Loans:
	set_temp_variable = { expenses_from_loans = current_loans_sum }
	divide_temp_variable = { expenses_from_loans = -100 }
	add_to_variable = { total_expenses_var = expenses_from_loans }

	# Other Expanses:
	set_temp_variable = { expenses_from_other_sources = modifier@money_expenses }
	if = {
		limit = {
			check_variable = { expenses_from_other_sources > 0 }
		}
		set_temp_variable = { expenses_from_other_sources = 0 }
	}
	add_to_variable = { total_expenses_var = expenses_from_other_sources }

	# Expenses Affecting Modifiers:
	calculate_money_expenses_modifiers = yes
}

# example usage:
## calculate_social_spending_modifiers = yes
calculate_social_spending_modifiers = {
	# Social Spending Modifiers:
	set_temp_variable = { social_spending_modifier = 1 }
	add_to_temp_variable = { social_spending_modifier = modifier@social_spending_cost_factor }
	if = {
		limit = {
			check_variable = { social_spending_modifier < 0 }
		}
		set_temp_variable = { social_spending_modifier = 0 }
	}
	multiply_temp_variable = { expenses_from_our_social_spending = social_spending_modifier }
	add_to_variable = { total_expenses_var = expenses_from_our_social_spending }

	# Setting Display Variable:
	set_temp_variable = { social_spending_cost_modifier = modifier@social_spending_cost_factor }
	set_temp_variable = { social_spending_cost_modifier_from_ideas = modifier@social_spending_cost_factor_from_ideas }
	set_temp_variable = { social_spending_cost_modifier_from_decisions = modifier@social_spending_cost_factor_from_decisions }
	set_temp_variable = { social_spending_cost_modifier_from_other = social_spending_cost_modifier }
	subtract_from_temp_variable = { social_spending_cost_modifier_from_other = social_spending_cost_modifier_from_ideas }
	subtract_from_temp_variable = { social_spending_cost_modifier_from_other = social_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { social_spending_cost_modifier < -1 }
		}
		set_temp_variable = { social_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_research_spending_modifiers = yes
calculate_research_spending_modifiers = {
	# Research and Education Spending Modifiers:
	set_temp_variable = { research_spending_modifier = 1 }
	add_to_temp_variable = { research_spending_modifier = modifier@research_spending_cost_factor }
	if = {
		limit = {
			check_variable = { research_spending_modifier < 0 }
		}
		set_temp_variable = { research_spending_modifier = 0 }
	}
	multiply_temp_variable = { expenses_from_our_research_spending = research_spending_modifier }
	add_to_variable = { total_expenses_var = expenses_from_our_research_spending }

	# Setting Display Variable:
	set_temp_variable = { research_spending_cost_modifier = modifier@research_spending_cost_factor }
	set_temp_variable = { research_spending_cost_modifier_from_ideas = modifier@research_spending_cost_factor_from_ideas }
	set_temp_variable = { research_spending_cost_modifier_from_decisions = modifier@research_spending_cost_factor_from_decisions }
	set_temp_variable = { research_spending_cost_modifier_from_other = research_spending_cost_modifier }
	subtract_from_temp_variable = { research_spending_cost_modifier_from_other = research_spending_cost_modifier_from_ideas }
	subtract_from_temp_variable = { research_spending_cost_modifier_from_other = research_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { research_spending_cost_modifier < -1 }
		}
		set_temp_variable = { research_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_army_spending_modifiers = yes
calculate_army_spending_modifiers = {
	# Army Spending Modifiers:
	set_temp_variable = { army_spending_modifier = 1 }
	add_to_temp_variable = { army_spending_modifier = modifier@army_spending_cost_factor }
	if = {
		limit = {
			check_variable = { army_spending_modifier < 0 }
		}
		set_temp_variable = { army_spending_modifier = 0 }
	}
	multiply_temp_variable = { expenses_from_our_army_spending = army_spending_modifier }
	add_to_variable = { total_expenses_var = expenses_from_our_army_spending }

	# Setting Display Variable:
	set_temp_variable = { army_spending_cost_modifier = modifier@army_spending_cost_factor }
	set_temp_variable = { army_spending_cost_modifier_from_ideas = modifier@army_spending_cost_factor_from_ideas }
	set_temp_variable = { army_spending_cost_modifier_from_decisions = modifier@army_spending_cost_factor_from_decisions }
	set_temp_variable = { army_spending_cost_modifier_from_other = army_spending_cost_modifier }
	subtract_from_temp_variable = { army_spending_cost_modifier_from_other = army_spending_cost_modifier_from_ideas }
	subtract_from_temp_variable = { army_spending_cost_modifier_from_other = army_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { army_spending_cost_modifier < -1 }
		}
		set_temp_variable = { army_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_navy_spending_modifiers = yes
calculate_navy_spending_modifiers = {
	# Army Spending Modifiers:
	set_temp_variable = { navy_spending_modifier = 1 }
	add_to_temp_variable = { navy_spending_modifier = modifier@navy_spending_cost_factor }
	if = {
		limit = {
			check_variable = { navy_spending_modifier < 0 }
		}
		set_temp_variable = { navy_spending_modifier = 0 }
	}
	multiply_temp_variable = { expenses_from_our_navy_spending = navy_spending_modifier }
	add_to_variable = { total_expenses_var = expenses_from_our_navy_spending }

	# Setting Display Variable:
	set_temp_variable = { navy_spending_cost_modifier = modifier@navy_spending_cost_factor }
	set_temp_variable = { navy_spending_cost_modifier_from_ideas = modifier@navy_spending_cost_factor_from_ideas }
	set_temp_variable = { navy_spending_cost_modifier_from_decisions = modifier@navy_spending_cost_factor_from_decisions }
	set_temp_variable = { navy_spending_cost_modifier_from_other = navy_spending_cost_modifier }
	subtract_from_temp_variable = { navy_spending_cost_modifier_from_other = navy_spending_cost_modifier_from_ideas }
	subtract_from_temp_variable = { navy_spending_cost_modifier_from_other = navy_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { navy_spending_cost_modifier < -1 }
		}
		set_temp_variable = { navy_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_road_spending_modifiers = yes
calculate_road_spending_modifiers = {
	# Army Spending Modifiers:
	set_temp_variable = { road_spending_modifier = 1 }
	add_to_temp_variable = { road_spending_modifier = modifier@road_spending_cost_factor }
	if = {
		limit = {
			check_variable = { road_spending_modifier < 0 }
		}
		set_temp_variable = { road_spending_modifier = 0 }
	}
	multiply_temp_variable = { expenses_from_our_road_spending = road_spending_modifier }
	add_to_variable = { total_expenses_var = expenses_from_our_road_spending }

	# Setting Display Variable:
	set_temp_variable = { road_spending_cost_modifier = modifier@road_spending_cost_factor }
	set_temp_variable = { road_spending_cost_modifier_from_ideas = modifier@road_spending_cost_factor_from_ideas }
	set_temp_variable = { road_spending_cost_modifier_from_decisions = modifier@road_spending_cost_factor_from_decisions }
	set_temp_variable = { road_spending_cost_modifier_from_other = road_spending_cost_modifier }
	subtract_from_temp_variable = { road_spending_cost_modifier_from_other = road_spending_cost_modifier_from_ideas }
	subtract_from_temp_variable = { road_spending_cost_modifier_from_other = road_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { road_spending_cost_modifier < -1 }
		}
		set_temp_variable = { road_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_law_spending_modifiers = yes
calculate_law_spending_modifiers = {
	# Army Spending Modifiers:
	set_temp_variable = { law_spending_modifier = 1 }
	add_to_temp_variable = { law_spending_modifier = modifier@law_spending_cost_factor }
	if = {
		limit = {
			check_variable = { law_spending_modifier < 0 }
		}
		set_temp_variable = { law_spending_modifier = 0 }
	}
	multiply_temp_variable = { expenses_from_our_law_spending = law_spending_modifier }
	add_to_variable = { total_expenses_var = expenses_from_our_law_spending }

	# Setting Display Variable:
	set_temp_variable = { law_spending_cost_modifier = modifier@law_spending_cost_factor }
	set_temp_variable = { law_spending_cost_modifier_from_ideas = modifier@law_spending_cost_factor_from_ideas }
	set_temp_variable = { law_spending_cost_modifier_from_decisions = modifier@law_spending_cost_factor_from_decisions }
	set_temp_variable = { law_spending_cost_modifier_from_other = law_spending_cost_modifier }
	subtract_from_temp_variable = { law_spending_cost_modifier_from_other = law_spending_cost_modifier_from_ideas }
	subtract_from_temp_variable = { law_spending_cost_modifier_from_other = law_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { law_spending_cost_modifier < -1 }
		}
		set_temp_variable = { law_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_money_expenses_modifiers = yes
calculate_money_expenses_modifiers = {
	# Calculation:
	set_temp_variable = { expenses_modifier_calculation = 1 }

	# Inflation:
	add_to_temp_variable = { expenses_modifier_calculation = current_inflation }

	# Other Sources:
	add_to_temp_variable = { expenses_modifier_calculation = modifier@money_expenses_factor }

	if = {
		limit = {
			check_variable = { expenses_modifier_calculation < 0 }
		}
		set_temp_variable = { expenses_modifier_calculation = 0 }
	}
	multiply_variable = { total_expenses_var = expenses_modifier_calculation }

	# Setting Display Variable:
	set_temp_variable = { expenses_modifier = modifier@money_expenses_factor }
	add_to_temp_variable = { expenses_modifier = current_inflation }
	set_temp_variable = { expenses_modifier_from_ideas = modifier@money_expenses_factor_from_ideas }
	set_temp_variable = { expenses_modifier_from_decisions = modifier@money_expenses_factor_from_decisions }
	set_temp_variable = { expenses_modifier_from_other = expenses_modifier }
	subtract_from_temp_variable = { expenses_modifier_from_other = expenses_modifier_from_ideas }
	subtract_from_temp_variable = { expenses_modifier_from_other = expenses_modifier_from_decisions }
	subtract_from_temp_variable = { expenses_modifier_from_other = current_inflation }
	if = {
		limit = {
			check_variable = { expenses_modifier < -1 }
		}
		set_temp_variable = { expenses_modifier = -1 }
	}
}

### TEMPORARY CALCULATIONS FOR BUDGET GUI ###

# example usage:
## calculate_temporary_money_balance = yes
calculate_temporary_money_balance = {
	set_variable = { total_balance_var_gui = 0 }

	# Temporary Income:
	calculate_temporary_money_income = yes

	# Temporary Expenses:
	calculate_temporary_money_expenses = yes


	# Balance:
	add_to_variable = { total_balance_var_gui = total_income_var_gui }
	add_to_variable = { total_balance_var_gui = total_expenses_var_gui }
}

# example usage:
## calculate_temporary_money_income = yes
calculate_temporary_money_income = {
	set_variable = { total_income_var_gui = 0 }

	# Taxes
	set_variable = { income_from_our_taxes_gui = 0 }
	set_temp_variable = { income_from_our_taxes_core = 0 }
	set_temp_variable = { income_from_our_taxes_non_core = 0 }
	hidden_effect = {
		every_owned_state = {
			if = {
				limit = {
					is_core_of = PREV
				}
				add_to_temp_variable = { income_from_our_taxes_core = state_population_k }
			}
			else_if = {
				limit = {
					NOT = { is_core_of = PREV }
				}
				add_to_temp_variable = { income_from_our_taxes_non_core = state_population_k }
			}
		}
	}
	divide_temp_variable = { income_from_our_taxes_core = 9000 }
	divide_temp_variable = { income_from_our_taxes_non_core = 300000 }
	add_to_variable = { income_from_our_taxes_gui = income_from_our_taxes_core }
	add_to_variable = { income_from_our_taxes_gui = income_from_our_taxes_non_core }
	multiply_variable = { income_from_our_taxes_gui = 7 } # money is now weekly
	if = {
		limit = {
			check_variable = { income_from_our_taxes_gui < 0 }
		}
		set_variable = { income_from_our_taxes_gui = 2147483 }
	}

	# Tax Affecting Modifiers:
	calculate_temporary_tax_modifiers = yes

	# Consumer Goods Factories:																										# Example: Prussia
	set_variable = { income_from_our_consumer_goods_factories_gui = num_of_civilian_factories }										# 10 total civs at game start						= income 10
	multiply_variable = { income_from_our_consumer_goods_factories_gui = modifier@consumer_goods_expected_value }					# Expected civs at game start 30% (10 x 0.3) 		= income 3
	round_variable = income_from_our_consumer_goods_factories_gui																	# Nothing to round here								= income 3
	if = {
		limit = {
			check_variable = { income_from_our_consumer_goods_factories_gui < 0 }
		}
		set_variable = { income_from_our_consumer_goods_factories_gui = 0 }
	}
	multiply_variable = { income_from_our_consumer_goods_factories_gui = 0.3 }														# Income decreased to one third (3 x 0.3)			= income 0.9
	multiply_variable = { income_from_our_consumer_goods_factories_gui = 3 } # money is now weekly									# Income increased by three (0.3 x 3)				= income 2.7

	# Consumer Goods Factories Modifiers:
	calculate_temporary_consumer_goods_modifiers = yes																						# There are modifiers that modify the total income from civs, read below.

	# Free Civilian Factories:
	set_variable = { income_from_our_free_civilian_factories_gui = num_of_available_civilian_factories }
	multiply_variable = { income_from_our_free_civilian_factories_gui = 0.08 }
	multiply_variable = { income_from_our_free_civilian_factories_gui = 3 } # money is now weekly
	add_to_variable = { total_income_var_gui = income_from_our_free_civilian_factories_gui }

	# Possible income from tariffs:
	#if = {
	#	limit = {
	#		num_of_factories > num_of_owned_factories
	#	}
	#	set_temp_variable = { income_from_tariffs = num_of_factories }
	#	subtract_from_temp_variable = { income_from_tariffs = num_of_owned_factories }
	#	if = {
	#		limit = {
	#			has_idea = free_trade
	#		}
	#		multiply_temp_variable = { income_from_tariffs = 0.05 }
	#	}
	#	else_if = {
	#		limit = {
	#			has_idea = export_focus
	#		}
	#		multiply_temp_variable = { income_from_tariffs = 0.15 }
	#	}
	#	else_if = {
	#		limit = {
	#			has_idea = limited_exports
	#		}
	#		multiply_temp_variable = { income_from_tariffs = 0.3 }
	#	}
	#	else_if = {
	#		limit = {
	#			has_idea = closed_economy
	#		}
	#		multiply_temp_variable = { income_from_tariffs = 0.75 }
	#	}
	#}
	#add_to_variable = { total_income_var_gui = income_from_tariffs }

	# Possible income from trading goods:
	#set_temp_variable = { income_from_trading_natural_resources = resource_exported@cotton }
	#add_to_temp_variable = { income_from_trading_natural_resources = resource_exported@wood }
	#multiply_temp_variable = { income_from_trading_natural_resources = 0.02 }
	#
	#set_temp_variable = { income_from_trading_minerals = resource_exported@coal }
	#add_to_temp_variable = { income_from_trading_minerals = resource_exported@iron }
	#multiply_temp_variable = { income_from_trading_minerals = 0.04 }
	#
	#set_temp_variable = { income_from_refined_materials = resource_exported@steel }
	#add_to_temp_variable = { income_from_refined_materials = resource_exported@fabric }
	#multiply_temp_variable = { income_from_refined_materials = 0.08 }
	#
	#set_temp_variable = { income_from_manufactured_goods = resource_exported@machine_parts }
	#multiply_temp_variable = { income_from_manufactured_goods = 0.16 }
	#
	#set_temp_variable = { income_from_trading_goods = income_from_trading_natural_resources }
	#add_to_temp_variable = { income_from_trading_goods = income_from_trading_minerals }
	#add_to_temp_variable = { income_from_trading_goods = income_from_refined_materials }
	#add_to_temp_variable = { income_from_trading_goods = income_from_manufactured_goods }
	#
	#if = {
	#	limit = {
	#		has_idea = free_trade
	#	}
	#	multiply_temp_variable = { income_from_trading_goods = 0.05 }
	#}
	#else_if = {
	#	limit = {
	#		has_idea = export_focus
	#	}
	#	multiply_temp_variable = { income_from_trading_goods = 0.15 }
	#}
	#else_if = {
	#	limit = {
	#		has_idea = limited_exports
	#	}
	#	multiply_temp_variable = { income_from_trading_goods = 0.3 }
	#}
	#else_if = {
	#	limit = {
	#		has_idea = closed_economy
	#	}
	#	multiply_temp_variable = { income_from_trading_goods = 0.75 }
	#}
	#add_to_variable = { total_income_var_gui = income_from_trading_goods }

	# Other Income:
	set_variable = { income_from_other_sources_gui = modifier@money_income }
	if = {
		limit = {
			check_variable = { income_from_other_sources_gui < 0 }
		}
		set_variable = { income_from_other_sources_gui = 0 }
	}
	add_to_variable = { total_income_var_gui = income_from_other_sources_gui }

	# Income Affecting Modifiers:
	calculate_temporary_money_income_modifiers = yes
}

# example usage:
## calculate_temporary_tax_modifiers = yes
calculate_temporary_tax_modifiers = {
	# Tax Modifiers:
	set_temp_variable = { tax_efficiency_modifier = 1 }
	add_to_temp_variable = { tax_efficiency_modifier = modifier@tax_efficiency_factor }
	if = {
		limit = {
			check_variable = { tax_efficiency_modifier < 0 }
		}
		set_temp_variable = { tax_efficiency_modifier = 0 }
	}
	multiply_variable = { income_from_our_taxes_gui = tax_efficiency_modifier }
	add_to_variable = { total_income_var_gui = income_from_our_taxes_gui }

	# Setting Display Variable:
	set_variable = { tax_modifier = modifier@tax_efficiency_factor }
	set_variable = { tax_modifier_from_ideas = modifier@tax_efficiency_factor_from_ideas }
	set_variable = { tax_modifier_from_decisions = modifier@tax_efficiency_factor_from_decisions }
	set_variable = { tax_modifier_from_other = tax_modifier }
	subtract_from_variable = { tax_modifier_from_other = tax_modifier_from_ideas }
	subtract_from_variable = { tax_modifier_from_other = tax_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { tax_modifier < -1 }
		}
		set_variable = { tax_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_consumer_goods_modifiers = yes
calculate_temporary_consumer_goods_modifiers = {
	# Consumer Goods Factories Modifiers:																							# Example: Prussia
	set_temp_variable = { consumer_goods_income_modifier = 1 }																		# Income modifier at start = 1 (no change at all)	= income modified by 1
	add_to_temp_variable = { consumer_goods_income_modifier = modifier@consumer_goods_income_factor }								# Income modified by consumer goods income factors (read below):
	if = {																															# Prussia has two ideas that increase the income from civ factories by
		limit = {																													# 5% (Zollverein) and 10% (Gewerbefreiheit) respectively - the income modifier is 1.15
			check_variable = { consumer_goods_income_modifier < 0 }
		}
		set_temp_variable = { consumer_goods_income_modifier = 0 }
	}
	multiply_variable = { income_from_our_consumer_goods_factories_gui = consumer_goods_income_modifier }							# Current income of 2.7 is modified by the factors from ideas etc. - 2.7 x 1.15 = 3.105
	add_to_variable = { total_income_var_gui = income_from_our_consumer_goods_factories_gui }										# Income of 3.105 is added to the total income

	# Setting Display Variable:
	set_variable = { consumer_goods_modifier = modifier@consumer_goods_income_factor }
	set_variable = { consumer_goods_modifier_from_ideas = modifier@consumer_goods_income_factor_from_ideas }
	set_variable = { consumer_goods_modifier_from_decisions = modifier@consumer_goods_income_factor_from_decisions }
	set_variable = { consumer_goods_modifier_from_other = consumer_goods_modifier }
	subtract_from_variable = { consumer_goods_modifier_from_other = consumer_goods_modifier_from_ideas }
	subtract_from_variable = { consumer_goods_modifier_from_other = consumer_goods_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { consumer_goods_modifier < -1 }
		}
		set_variable = { consumer_goods_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_money_income_modifiers = yes
calculate_temporary_money_income_modifiers = {
	# Calculation:
	set_temp_variable = { income_modifier_calculation = 1 }

	# Other Sources:
	add_to_temp_variable = { income_modifier_calculation = modifier@money_income_factor }

	if = {
		limit = {
			check_variable = { income_modifier_calculation < 0 }
		}
		set_temp_variable = { income_modifier_calculation = 0 }
	}
	multiply_variable = { total_income_var_gui = income_modifier_calculation }

	# Setting Display Variable:
	set_variable = { income_modifier = modifier@money_income_factor }
	set_variable = { income_modifier_from_ideas = modifier@money_income_factor_from_ideas }
	set_variable = { income_modifier_from_decisions = modifier@money_income_factor_from_decisions }
	set_variable = { income_modifier_from_other = income_modifier }
	subtract_from_variable = { income_modifier_from_other = income_modifier_from_ideas }
	subtract_from_variable = { income_modifier_from_other = income_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { income_modifier < -1 }
		}
		set_variable = { income_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_money_expenses = yes
calculate_temporary_money_expenses = {
	set_variable = { total_expenses_var_gui = 0 }

	# Social Spending:
	set_variable = { expenses_from_our_social_spending_gui = 0 }
	set_temp_variable = { expenses_from_our_social_spending_core = 0 }
	hidden_effect = {
		every_owned_state = {
			limit = {
				is_core_of = PREV
			}
			add_to_temp_variable = { expenses_from_our_social_spending_core = state_population_k }
		}
	}
	divide_temp_variable = { expenses_from_our_social_spending_core = 2000 }
	add_to_variable = { expenses_from_our_social_spending_gui = expenses_from_our_social_spending_core }
	multiply_variable = { expenses_from_our_social_spending_gui = -0.05 }
	multiply_variable = { expenses_from_our_social_spending_gui = 7 } # money is now weekly

	# Social Spending Affecting Modifiers:
	calculate_temporary_social_spending_modifiers = yes

	# Research and Education Spending:
	set_variable = { expenses_from_our_research_spending_gui = max_manpower_k }
	divide_variable = { expenses_from_our_research_spending_gui = 1000 }
	divide_variable = { expenses_from_our_research_spending_gui = 10 }
	multiply_variable = { expenses_from_our_research_spending_gui = -0.2 }
	multiply_variable = { expenses_from_our_research_spending_gui = amount_research_slots }
	multiply_variable = { expenses_from_our_research_spending_gui = 7 } # money is now weekly

	# Research and Education Spending Affecting Modifiers:
	calculate_temporary_research_spending_modifiers = yes

	# Army Spending:
	set_variable = { expenses_from_our_army_spending_gui = num_battalions }
	multiply_variable = { expenses_from_our_army_spending_gui = -0.003 }
	multiply_variable = { expenses_from_our_army_spending_gui = 7 } # money is now weekly

	# Army Spending Affecting Modifiers:
	calculate_temporary_army_spending_modifiers = yes

	# Navy Spending:
	set_variable = { expenses_from_our_navy_spending_gui = num_ships }
	multiply_variable = { expenses_from_our_navy_spending_gui = -0.003 }
	multiply_variable = { expenses_from_our_navy_spending_gui = 7 } # money is now weekly

	# Navy Spending Affecting Modifiers:
	calculate_temporary_navy_spending_modifiers = yes

	# Road Spending:
	set_variable = { expenses_from_our_road_spending_gui = 0 }
	set_temp_variable = { expenses_from_our_road_spending_core = 0 }
	hidden_effect = {
		every_owned_state = {
			limit = {
				is_core_of = PREV
			}
			add_to_temp_variable = { expenses_from_our_road_spending_core = infrastructure_level }
		}
	}
	add_to_variable = { expenses_from_our_road_spending_gui = expenses_from_our_road_spending_core }
	multiply_variable = { expenses_from_our_road_spending_gui = -0.002 }
	multiply_variable = { expenses_from_our_road_spending_gui = 7 } # money is now weekly

	# Road Spending Affecting Modifiers:
	calculate_temporary_road_spending_modifiers = yes

	# Law Spending:
	set_variable = { expenses_from_our_law_spending_gui = max_manpower_k }
	divide_variable = { expenses_from_our_law_spending_gui = 1000 }
	divide_variable = { expenses_from_our_law_spending_gui = 10 }
	multiply_variable = { expenses_from_our_law_spending_gui = -0.2 }
	multiply_variable = { expenses_from_our_law_spending_gui = 7 } # money is now weekly

	# Law Spending Affecting Modifiers:
	calculate_temporary_law_spending_modifiers = yes

	# Used Military Factories:
	set_variable = { expenses_from_our_used_mil_factories_gui = num_of_military_factories }
	subtract_from_variable = { expenses_from_our_used_mil_factories_gui = num_of_available_military_factories }
	round_variable = expenses_from_our_used_mil_factories_gui
	multiply_variable = { expenses_from_our_used_mil_factories_gui = -0.085 }
	multiply_variable = { expenses_from_our_used_mil_factories_gui = 7 } # money is now weekly
	add_to_variable = { total_expenses_var_gui = expenses_from_our_used_mil_factories_gui }

	# Interests from Loans:
	set_variable = { expenses_from_loans_gui = current_loans_sum }
	divide_variable = { expenses_from_loans_gui = -100 }
	add_to_variable = { total_expenses_var_gui = expenses_from_loans_gui }

	# Other Expanses:
	set_variable = { expenses_from_other_sources_gui = modifier@money_expenses }
	if = {
		limit = {
			check_variable = { expenses_from_other_sources_gui > 0 }
		}
		set_variable = { expenses_from_other_sources_gui = 0 }
	}
	add_to_variable = { total_expenses_var_gui = expenses_from_other_sources_gui }

	# Expenses Affecting Modifiers:
	calculate_temporary_money_expenses_modifiers = yes
}

# example usage:
## calculate_temporary_social_spending_modifiers = yes
calculate_temporary_social_spending_modifiers = {
	# Social Spending Modifiers:
	set_temp_variable = { social_spending_modifier = 1 }
	add_to_temp_variable = { social_spending_modifier = modifier@social_spending_cost_factor }
	if = {
		limit = {
			check_variable = { social_spending_modifier < 0 }
		}
		set_temp_variable = { social_spending_modifier = 0 }
	}
	multiply_variable = { expenses_from_our_social_spending_gui = social_spending_modifier }
	add_to_variable = { total_expenses_var_gui = expenses_from_our_social_spending_gui }

	# Setting Display Variable:
	set_variable = { social_spending_cost_modifier = modifier@social_spending_cost_factor }
	set_variable = { social_spending_cost_modifier_from_ideas = modifier@social_spending_cost_factor_from_ideas }
	set_variable = { social_spending_cost_modifier_from_decisions = modifier@social_spending_cost_factor_from_decisions }
	set_variable = { social_spending_cost_modifier_from_other = social_spending_cost_modifier }
	subtract_from_variable = { social_spending_cost_modifier_from_other = social_spending_cost_modifier_from_ideas }
	subtract_from_variable = { social_spending_cost_modifier_from_other = social_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { social_spending_cost_modifier < -1 }
		}
		set_variable = { social_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_research_spending_modifiers = yes
calculate_temporary_research_spending_modifiers = {
	# Research and Education Spending Modifiers:
	set_temp_variable = { research_spending_modifier = 1 }
	add_to_temp_variable = { research_spending_modifier = modifier@research_spending_cost_factor }
	if = {
		limit = {
			check_variable = { research_spending_modifier < 0 }
		}
		set_temp_variable = { research_spending_modifier = 0 }
	}
	multiply_variable = { expenses_from_our_research_spending_gui = research_spending_modifier }
	add_to_variable = { total_expenses_var_gui = expenses_from_our_research_spending_gui }

	# Setting Display Variable:
	set_variable = { research_spending_cost_modifier = modifier@research_spending_cost_factor }
	set_variable = { research_spending_cost_modifier_from_ideas = modifier@research_spending_cost_factor_from_ideas }
	set_variable = { research_spending_cost_modifier_from_decisions = modifier@research_spending_cost_factor_from_decisions }
	set_variable = { research_spending_cost_modifier_from_other = research_spending_cost_modifier }
	subtract_from_variable = { research_spending_cost_modifier_from_other = research_spending_cost_modifier_from_ideas }
	subtract_from_variable = { research_spending_cost_modifier_from_other = research_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { research_spending_cost_modifier < -1 }
		}
		set_variable = { research_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_army_spending_modifiers = yes
calculate_temporary_army_spending_modifiers = {
	# Army Spending Modifiers:
	set_temp_variable = { army_spending_modifier = 1 }
	add_to_temp_variable = { army_spending_modifier = modifier@army_spending_cost_factor }
	if = {
		limit = {
			check_variable = { army_spending_modifier < 0 }
		}
		set_temp_variable = { army_spending_modifier = 0 }
	}
	multiply_variable = { expenses_from_our_army_spending_gui = army_spending_modifier }
	add_to_variable = { total_expenses_var_gui = expenses_from_our_army_spending_gui }

	# Setting Display Variable:
	set_variable = { army_spending_cost_modifier = modifier@army_spending_cost_factor }
	set_variable = { army_spending_cost_modifier_from_ideas = modifier@army_spending_cost_factor_from_ideas }
	set_variable = { army_spending_cost_modifier_from_decisions = modifier@army_spending_cost_factor_from_decisions }
	set_variable = { army_spending_cost_modifier_from_other = army_spending_cost_modifier }
	subtract_from_variable = { army_spending_cost_modifier_from_other = army_spending_cost_modifier_from_ideas }
	subtract_from_variable = { army_spending_cost_modifier_from_other = army_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { army_spending_cost_modifier < -1 }
		}
		set_variable = { army_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_navy_spending_modifiers = yes
calculate_temporary_navy_spending_modifiers = {
	# Army Spending Modifiers:
	set_temp_variable = { navy_spending_modifier = 1 }
	add_to_temp_variable = { navy_spending_modifier = modifier@navy_spending_cost_factor }
	if = {
		limit = {
			check_variable = { navy_spending_modifier < 0 }
		}
		set_temp_variable = { navy_spending_modifier = 0 }
	}
	multiply_variable = { expenses_from_our_navy_spending_gui = navy_spending_modifier }
	add_to_variable = { total_expenses_var_gui = expenses_from_our_navy_spending_gui }

	# Setting Display Variable:
	set_variable = { navy_spending_cost_modifier = modifier@navy_spending_cost_factor }
	set_variable = { navy_spending_cost_modifier_from_ideas = modifier@navy_spending_cost_factor_from_ideas }
	set_variable = { navy_spending_cost_modifier_from_decisions = modifier@navy_spending_cost_factor_from_decisions }
	set_variable = { navy_spending_cost_modifier_from_other = navy_spending_cost_modifier }
	subtract_from_variable = { navy_spending_cost_modifier_from_other = navy_spending_cost_modifier_from_ideas }
	subtract_from_variable = { navy_spending_cost_modifier_from_other = navy_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { navy_spending_cost_modifier < -1 }
		}
		set_variable = { navy_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_road_spending_modifiers = yes
calculate_temporary_road_spending_modifiers = {
	# Army Spending Modifiers:
	set_temp_variable = { road_spending_modifier = 1 }
	add_to_temp_variable = { road_spending_modifier = modifier@road_spending_cost_factor }
	if = {
		limit = {
			check_variable = { road_spending_modifier < 0 }
		}
		set_temp_variable = { road_spending_modifier = 0 }
	}
	multiply_variable = { expenses_from_our_road_spending_gui = road_spending_modifier }
	add_to_variable = { total_expenses_var_gui = expenses_from_our_road_spending_gui }

	# Setting Display Variable:
	set_variable = { road_spending_cost_modifier = modifier@road_spending_cost_factor }
	set_variable = { road_spending_cost_modifier_from_ideas = modifier@road_spending_cost_factor_from_ideas }
	set_variable = { road_spending_cost_modifier_from_decisions = modifier@road_spending_cost_factor_from_decisions }
	set_variable = { road_spending_cost_modifier_from_other = road_spending_cost_modifier }
	subtract_from_variable = { road_spending_cost_modifier_from_other = road_spending_cost_modifier_from_ideas }
	subtract_from_variable = { road_spending_cost_modifier_from_other = road_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { road_spending_cost_modifier < -1 }
		}
		set_variable = { road_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_law_spending_modifiers = yes
calculate_temporary_law_spending_modifiers = {
	# Army Spending Modifiers:
	set_temp_variable = { law_spending_modifier = 1 }
	add_to_temp_variable = { law_spending_modifier = modifier@law_spending_cost_factor }
	if = {
		limit = {
			check_variable = { law_spending_modifier < 0 }
		}
		set_temp_variable = { law_spending_modifier = 0 }
	}
	multiply_variable = { expenses_from_our_law_spending_gui = law_spending_modifier }
	add_to_variable = { total_expenses_var_gui = expenses_from_our_law_spending_gui }

	# Setting Display Variable:
	set_variable = { law_spending_cost_modifier = modifier@law_spending_cost_factor }
	set_variable = { law_spending_cost_modifier_from_ideas = modifier@law_spending_cost_factor_from_ideas }
	set_variable = { law_spending_cost_modifier_from_decisions = modifier@law_spending_cost_factor_from_decisions }
	set_variable = { law_spending_cost_modifier_from_other = law_spending_cost_modifier }
	subtract_from_variable = { law_spending_cost_modifier_from_other = law_spending_cost_modifier_from_ideas }
	subtract_from_variable = { law_spending_cost_modifier_from_other = law_spending_cost_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { law_spending_cost_modifier < -1 }
		}
		set_variable = { law_spending_cost_modifier = -1 }
	}
}

# example usage:
## calculate_temporary_money_expenses_modifiers = yes
calculate_temporary_money_expenses_modifiers = {
	# Calculation:
	set_temp_variable = { expenses_modifier_calculation = 1 }

	# Inflation:
	add_to_temp_variable = { expenses_modifier_calculation = current_inflation }

	# Other Sources:
	add_to_temp_variable = { expenses_modifier_calculation = modifier@money_expenses_factor }

	if = {
		limit = {
			check_variable = { expenses_modifier_calculation < 0 }
		}
		set_temp_variable = { expenses_modifier_calculation = 0 }
	}
	multiply_variable = { total_expenses_var_gui = expenses_modifier_calculation }

	# Setting Display Variable:
	set_variable = { expenses_modifier = modifier@money_expenses_factor }
	add_to_variable = { expenses_modifier = current_inflation }
	set_variable = { expenses_modifier_from_ideas = modifier@money_expenses_factor_from_ideas }
	set_variable = { expenses_modifier_from_decisions = modifier@money_expenses_factor_from_decisions }
	set_variable = { expenses_modifier_from_other = expenses_modifier }
	subtract_from_variable = { expenses_modifier_from_other = expenses_modifier_from_ideas }
	subtract_from_variable = { expenses_modifier_from_other = expenses_modifier_from_decisions }
	subtract_from_variable = { expenses_modifier_from_other = current_inflation }
	if = {
		limit = {
			check_variable = { expenses_modifier < -1 }
		}
		set_variable = { expenses_modifier = -1 }
	}
}
# example usage:
## set_temp_variable = { money_to_gain = 100 }
## add_money_with_tooltip_effect = yes
add_money_with_tooltip_effect = {
	if = {
		limit = {
			check_variable = { money_to_gain < 0 }
		}
		custom_effect_tooltip = LOSE_MONEY_TT
	}
	else = {
		custom_effect_tooltip = GAIN_MONEY_TT
	}
	hidden_effect = {
		set_temp_variable = { money_temp = money }
		add_to_variable = { money = money_to_gain }
		clamp_variable = {
			var = money
			min = -2000000
			max = 2000000
		}
		if = {
			limit = {
				check_variable = { money_to_gain > 0 }
				check_variable = { money < money_temp }
			}
			set_variable = { money = 2000000 }
		}
		else_if = {
			limit = {
				check_variable = { money_to_gain < 0 }
				check_variable = { money > money_temp }
			}
			set_variable = { money = -2000000 }
		}
	}
}

# example usage:
## set_temp_variable = { money_to_gain = 100 }
## add_money_with_inflation_included_with_tooltip_effect = yes
add_money_with_inflation_included_with_tooltip_effect = {
	set_temp_variable = { inflation_calc_temp = 1 }
	add_to_temp_variable = { inflation_calc_temp = current_inflation }
	multiply_temp_variable = { money_to_gain = inflation_calc_temp }
	if = {
		limit = {
			check_variable = { money_to_gain < 0 }
		}
		custom_effect_tooltip = LOSE_MONEY_TT
	}
	else = {
		custom_effect_tooltip = GAIN_MONEY_TT
	}
	hidden_effect = {
		set_temp_variable = { money_temp = money }
		add_to_variable = { money = money_to_gain }
		clamp_variable = {
			var = money
			min = -2000000
			max = 2000000
		}
		if = {
			limit = {
				check_variable = { money_to_gain > 0 }
				check_variable = { money < money_temp }
			}
			set_variable = { money = 2000000 }
		}
		else_if = {
			limit = {
				check_variable = { money_to_gain < 0 }
				check_variable = { money > money_temp }
			}
			set_variable = { money = -2000000 }
		}
	}
}

# example usage:
## set_temp_variable = { inflation_to_gain = 100 }
## add_inflation_with_tooltip_effect = yes
add_inflation_with_tooltip_effect = {
	if = {
		limit = {
			check_variable = { inflation_to_gain < 0 }
		}
		custom_effect_tooltip = LOSE_INFLATION_TT
	}
	else = {
		custom_effect_tooltip = GAIN_INFLATION_TT
	}
	add_to_variable = { current_inflation = inflation_to_gain }
	hidden_effect = {
		if = {
			limit = {
				check_variable = { current_inflation < 0 }
			}
			set_variable = { current_inflation = 0 }
		}
		else_if = {
			limit = {
				check_variable = { current_inflation > 20000 }
			}
			set_variable = { current_inflation = 20000 }
		}
		set_variable = { inflation_effect_var = current_inflation }
		divide_variable = { inflation_effect_var = -2 }
		force_update_dynamic_modifier = yes
	}
}

# example usage:
## set_temp_variable = { unemployment_value = 0.5 }
## set_unemployment_effect = yes
set_unemployment_effect = {
	clamp_temp_variable = {
		var = unemployment_value
		min = 0
		max = 1
	}
	custom_effect_tooltip = SET_UNEMPLOYMENT_EFFECT_TT
	hidden_effect = {
		set_variable = { current_unemployment = unemployment_value }
		clamp_variable = {
			var = current_unemployment
			min = 0
			max = 1
		}
		update_unemployment_modifier = yes
	}
}

# example usage:
## set_temp_variable = { unemployment_value = 0.5 }
## add_unemployment_effect = yes
add_unemployment_effect = {
	clamp_temp_variable = {
		var = unemployment_value
		min = -1
		max = 1
	}
	if = {
		limit = {
			NOT = { check_variable = { current_unemployment = 0 } }
		}
		custom_effect_tooltip = ADD_UNEMPLOYMENT_EFFECT_TT
	}
	hidden_effect = {
		add_to_variable = { current_unemployment = unemployment_value }
		clamp_variable = {
			var = current_unemployment
			min = 0
			max = 1
		}
		update_unemployment_modifier = yes
	}
}

# example usage:
## update_unemployment_modifier = yes
update_unemployment_modifier = {
	set_temp_variable = { unemployment_value_modifier_temp = 1 }
	add_to_temp_variable = { unemployment_value_modifier_temp = unemployment_value_modifier }
	add_to_temp_variable = { unemployment_value_modifier_temp = modifier@unemployment_value_factor }
	if = {
		limit = {
			check_variable = { unemployment_value_modifier_temp < 0 }
		}
		set_temp_variable = { unemployment_value_modifier_temp = 0 }
	}
	if = {
		limit = {
			NOT = { check_variable = { current_unemployment = 0 } }
		}
		set_temp_variable = { current_unemployment_temp = current_unemployment }
		multiply_temp_variable = { current_unemployment_temp = unemployment_value_modifier_temp }
		set_variable = { unemployment_modifier_negative_var = current_unemployment_temp }
		multiply_variable = { unemployment_modifier_negative_var = -1 }
		set_variable = { unemployment_modifier_half_negative_var = current_unemployment_temp }
		divide_variable = { unemployment_modifier_half_negative_var = -2 }
		if = {
			limit = {
				NOT = { has_dynamic_modifier = { modifier = unemployment_dynamic_modifier } }
			}
			add_dynamic_modifier = { modifier = unemployment_dynamic_modifier }
		}
		else = {
			force_update_dynamic_modifier = yes
		}
	}
	else = {
		clear_variable = current_unemployment
		clear_variable = unemployment_modifier_negative_var
		clear_variable = unemployment_modifier_half_negative_var
		if = {
			limit = {
				has_dynamic_modifier = { modifier = unemployment_dynamic_modifier }
			}
			remove_dynamic_modifier = { modifier = unemployment_dynamic_modifier }
		}
	}
}

# example usage:
## set_temp_variable = { modifier_value = 0.1 }
## change_unemployment_value_modifier = yes
change_unemployment_value_modifier = {
	set_temp_variable = { current_value = unemployment_value_modifier }
	add_to_temp_variable = { current_value = modifier@unemployment_value_factor }
	if = {
		limit = {
			check_variable = { current_value < -1 }
		}
		set_temp_variable = { current_value = -1 }
	}
	custom_effect_tooltip = CHANGE_UNEMPLOYMENT_VALUE_MODIFIER_TT
	hidden_effect = {
		add_to_variable = { unemployment_value_modifier = modifier_value }
		clamp_variable = {
			var = unemployment_value_modifier
			min = -20000
			max = 20000
		}
		update_unemployment_modifier = yes
	}
}

# example usage:
## set_temp_variable = { loans_amount = 1 }
## take_loan_effect = yes
take_loan_effect = {
	custom_effect_tooltip = TAKE_LOAN_EFFECT_TT
	hidden_effect = {
		if = {
			limit = {
				check_variable = { loans_amount < 1000 }
			}
			for_loop_effect = {
				start = 0
				end = loans_amount
				set_temp_variable = { loan_size = 10 }
				add_to_variable = { current_loans_sum = loan_size }
				set_temp_variable = { money_to_gain = loan_size }
				add_money_with_tooltip_effect = yes
				set_temp_variable = { inflation_to_gain = 0.01 }
				add_inflation_with_tooltip_effect = yes
			}
		}
		else = {
			set_temp_variable = { first_loop = loans_amount }
			divide_temp_variable = { first_loop = 1000 }
			if = {
				limit = {
					check_variable = { first_loop < 1000 }
				}
				divide_temp_variable = { loans_amount = first_loop }
				for_loop_effect = {
					start = 0
					end = first_loop
					for_loop_effect = {
						start = 0
						end = loans_amount
						set_temp_variable = { loan_size = 10 }
						add_to_variable = { current_loans_sum = loan_size }
						set_temp_variable = { money_to_gain = loan_size }
						add_money_with_tooltip_effect = yes
						set_temp_variable = { inflation_to_gain = 0.01 }
						add_inflation_with_tooltip_effect = yes
					}
				}
				multiply_temp_variable = { loans_amount = first_loop }
			}
			else = {
				set_temp_variable = { second_loop = first_loop }
				divide_temp_variable = { second_loop = 1000 }
				divide_temp_variable = { loans_amount = first_loop }
				divide_temp_variable = { loans_amount = second_loop }
				for_loop_effect = {
					start = 0
					end = second_loop
					for_loop_effect = {
						start = 0
						end = first_loop
						for_loop_effect = {
							start = 0
							end = loans_amount
							set_temp_variable = { loan_size = 10 }
							add_to_variable = { current_loans_sum = loan_size }
							set_temp_variable = { money_to_gain = loan_size }
							add_money_with_tooltip_effect = yes
							set_temp_variable = { inflation_to_gain = 0.01 }
							add_inflation_with_tooltip_effect = yes
						}
					}
				}
				multiply_temp_variable = { loans_amount = first_loop }
				multiply_temp_variable = { loans_amount = second_loop }
			}
		}
		if = {
			limit = {
				check_variable = { current_loans_sum < 0 }
			}
			# if you overflow loans, you automatically become bankrupt
			become_bankrupt_effect = yes
		}
	}
	effect_tooltip = {
		set_temp_variable = { loan_size = 10 }
		add_to_variable = { current_loans_sum = loan_size }
		set_temp_variable = { money_to_gain = loan_size }
		add_money_with_tooltip_effect = yes
		set_temp_variable = { inflation_to_gain = 0.01 }
		add_inflation_with_tooltip_effect = yes
	}
}
# example usage:
## set_temp_variable = { loans_amount = 1 }
## take_loan_without_inflation_effect = yes
take_loan_without_inflation_effect = {
	custom_effect_tooltip = TAKE_LOAN_EFFECT_TT
	hidden_effect = {
		if = {
			limit = {
				check_variable = { loans_amount < 1000 }
			}
			for_loop_effect = {
				start = 0
				end = loans_amount
				set_temp_variable = { loan_size = 100 }
				add_to_variable = { current_loans_sum = loan_size }
				set_temp_variable = { money_to_gain = loan_size }
				add_money_with_tooltip_effect = yes
			}
		}
		else = {
			set_temp_variable = { first_loop = loans_amount }
			divide_temp_variable = { first_loop = 1000 }
			if = {
				limit = {
					check_variable = { first_loop < 1000 }
				}
				divide_temp_variable = { loans_amount = first_loop }
				for_loop_effect = {
					start = 0
					end = first_loop
					for_loop_effect = {
						start = 0
						end = loans_amount
						set_temp_variable = { loan_size = 100 }
						add_to_variable = { current_loans_sum = loan_size }
						set_temp_variable = { money_to_gain = loan_size }
						add_money_with_tooltip_effect = yes
					}
				}
				multiply_temp_variable = { loans_amount = first_loop }
			}
			else = {
				set_temp_variable = { second_loop = first_loop }
				divide_temp_variable = { second_loop = 1000 }
				divide_temp_variable = { loans_amount = first_loop }
				divide_temp_variable = { loans_amount = second_loop }
				for_loop_effect = {
					start = 0
					end = second_loop
					for_loop_effect = {
						start = 0
						end = first_loop
						for_loop_effect = {
							start = 0
							end = loans_amount
							set_temp_variable = { loan_size = 100 }
							add_to_variable = { current_loans_sum = loan_size }
							set_temp_variable = { money_to_gain = loan_size }
							add_money_with_tooltip_effect = yes
						}
					}
				}
				multiply_temp_variable = { loans_amount = first_loop }
				multiply_temp_variable = { loans_amount = second_loop }
			}
		}
		if = {
			limit = {
				check_variable = { current_loans_sum < 0 }
			}
			# if you overflow loans, you automatically become bankrupt
			become_bankrupt_effect = yes
		}
	}
	effect_tooltip = {
		set_temp_variable = { loan_size = 100 }
		add_to_variable = { current_loans_sum = loan_size }
		set_temp_variable = { money_to_gain = loan_size }
		add_money_with_tooltip_effect = yes
	}
}

# example usage:
## become_bankrupt_effect = yes
become_bankrupt_effect = {
	custom_effect_tooltip = REMOVE_ALL_LOANS_GET_RID_OF_DEBTS
	hidden_effect = {
		set_variable = { current_loans_sum = 0 }
		set_variable = { money = 0 }
		set_temp_variable = { inflation_to_gain = -20000 } # set to 0
		add_inflation_with_tooltip_effect = yes
	}
	add_political_power = -300
	add_timed_idea = {
		idea = bankruptcy
		days = 180
	}
	hidden_effect = {
		activate_mission = can_become_bankrupt_mission
		remove_mission = can_become_bankrupt_mission
		if = {
			limit = {
				is_ai = no
			}
			set_variable = { show_bankruptcy_popup = 1 }
		}
	}
}

# example usage:
## decrease_slider_taxes = yes
decrease_slider_taxes = {
	if = {
		limit = {
			NOT = { has_idea = taxation_level_1 }
		}
		if = {
			limit = {
				has_idea = taxation_level_2
			}
			swap_ideas = {
				add_idea = taxation_level_1
				remove_idea = taxation_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = taxation_level_3
			}
			swap_ideas = {
				add_idea = taxation_level_2
				remove_idea = taxation_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = taxation_level_4
			}
			swap_ideas = {
				add_idea = taxation_level_3
				remove_idea = taxation_level_4
			}
		}
		else_if = {
			limit = {
				has_idea = taxation_level_5
			}
			swap_ideas = {
				add_idea = taxation_level_4
				remove_idea = taxation_level_5
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_LOWER_TAXATION_LEVEL_TT
	}
}

# example usage:
## increase_slider_taxes = yes
increase_slider_taxes = {
	if = {
		limit = {
			NOT = { has_idea = taxation_level_5 }
		}
		if = {
			limit = {
				has_idea = taxation_level_1
			}
			swap_ideas = {
				add_idea = taxation_level_2
				remove_idea = taxation_level_1
			}
		}
		else_if = {
			limit = {
				has_idea = taxation_level_2
			}
			swap_ideas = {
				add_idea = taxation_level_3
				remove_idea = taxation_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = taxation_level_3
			}
			swap_ideas = {
				add_idea = taxation_level_4
				remove_idea = taxation_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = taxation_level_4
			}
			swap_ideas = {
				add_idea = taxation_level_5
				remove_idea = taxation_level_4
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_INCREASE_TAXATION_LEVEL_TT
	}
}

# example usage:
## decrease_slider_social_spending = yes
decrease_slider_social_spending = {
	if = {
		limit = {
			NOT = { has_idea = social_spending_level_1 }
		}
		if = {
			limit = {
				has_idea = social_spending_level_2
			}
			swap_ideas = {
				add_idea = social_spending_level_1
				remove_idea = social_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = social_spending_level_3
			}
			swap_ideas = {
				add_idea = social_spending_level_2
				remove_idea = social_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = social_spending_level_4
			}
			swap_ideas = {
				add_idea = social_spending_level_3
				remove_idea = social_spending_level_4
			}
		}
		else_if = {
			limit = {
				has_idea = social_spending_level_5
			}
			swap_ideas = {
				add_idea = social_spending_level_4
				remove_idea = social_spending_level_5
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_LOWER_SOCIAL_SPENDING_LEVEL_TT
	}
}

# example usage:
## increase_slider_social_spending = yes
increase_slider_social_spending = {
	if = {
		limit = {
			NOT = { has_idea = social_spending_level_5 }
		}
		if = {
			limit = {
				has_idea = social_spending_level_1
			}
			swap_ideas = {
				add_idea = social_spending_level_2
				remove_idea = social_spending_level_1
			}
		}
		else_if = {
			limit = {
				has_idea = social_spending_level_2
			}
			swap_ideas = {
				add_idea = social_spending_level_3
				remove_idea = social_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = social_spending_level_3
			}
			swap_ideas = {
				add_idea = social_spending_level_4
				remove_idea = social_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = social_spending_level_4
			}
			swap_ideas = {
				add_idea = social_spending_level_5
				remove_idea = social_spending_level_4
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_INCREASE_SOCIAL_SPENDING_LEVEL_TT
	}
}

# example usage:
## decrease_slider_research_spending = yes
decrease_slider_research_spending = {
	if = {
		limit = {
			NOT = { has_idea = research_spending_level_1 }
		}
		if = {
			limit = {
				has_idea = research_spending_level_2
			}
			swap_ideas = {
				add_idea = research_spending_level_1
				remove_idea = research_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = research_spending_level_3
			}
			swap_ideas = {
				add_idea = research_spending_level_2
				remove_idea = research_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = research_spending_level_4
			}
			swap_ideas = {
				add_idea = research_spending_level_3
				remove_idea = research_spending_level_4
			}
		}
		else_if = {
			limit = {
				has_idea = research_spending_level_5
			}
			swap_ideas = {
				add_idea = research_spending_level_4
				remove_idea = research_spending_level_5
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_LOWER_RESEARCH_SPENDING_LEVEL_TT
	}
}

# example usage:
## increase_slider_research_spending = yes
increase_slider_research_spending = {
	if = {
		limit = {
			NOT = { has_idea = research_spending_level_5 }
		}
		if = {
			limit = {
				has_idea = research_spending_level_1
			}
			swap_ideas = {
				add_idea = research_spending_level_2
				remove_idea = research_spending_level_1
			}
		}
		else_if = {
			limit = {
				has_idea = research_spending_level_2
			}
			swap_ideas = {
				add_idea = research_spending_level_3
				remove_idea = research_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = research_spending_level_3
			}
			swap_ideas = {
				add_idea = research_spending_level_4
				remove_idea = research_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = research_spending_level_4
			}
			swap_ideas = {
				add_idea = research_spending_level_5
				remove_idea = research_spending_level_4
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_INCREASE_RESEARCH_SPENDING_LEVEL_TT
	}
}

# example usage:
## decrease_slider_army = yes
decrease_slider_army = {
	if = {
		limit = {
			NOT = { has_idea = army_spending_level_1 }
		}
		if = {
			limit = {
				has_idea = army_spending_level_2
			}
			swap_ideas = {
				add_idea = army_spending_level_1
				remove_idea = army_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = army_spending_level_3
			}
			swap_ideas = {
				add_idea = army_spending_level_2
				remove_idea = army_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = army_spending_level_4
			}
			swap_ideas = {
				add_idea = army_spending_level_3
				remove_idea = army_spending_level_4
			}
		}
		else_if = {
			limit = {
				has_idea = army_spending_level_5
			}
			swap_ideas = {
				add_idea = army_spending_level_4
				remove_idea = army_spending_level_5
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_LOWER_ARMY_SPENDING_LEVEL_TT
	}
}

# example usage:
## increase_slider_army = yes
increase_slider_army = {
	if = {
		limit = {
			NOT = { has_idea = army_spending_level_5 }
		}
		if = {
			limit = {
				has_idea = army_spending_level_1
			}
			swap_ideas = {
				add_idea = army_spending_level_2
				remove_idea = army_spending_level_1
			}
		}
		else_if = {
			limit = {
				has_idea = army_spending_level_2
			}
			swap_ideas = {
				add_idea = army_spending_level_3
				remove_idea = army_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = army_spending_level_3
			}
			swap_ideas = {
				add_idea = army_spending_level_4
				remove_idea = army_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = army_spending_level_4
			}
			swap_ideas = {
				add_idea = army_spending_level_5
				remove_idea = army_spending_level_4
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_INCREASE_ARMY_SPENDING_LEVEL_TT
	}
}

# example usage:
## decrease_slider_navy = yes
decrease_slider_navy = {
	if = {
		limit = {
			NOT = { has_idea = navy_spending_level_1 }
		}
		if = {
			limit = {
				has_idea = navy_spending_level_2
			}
			swap_ideas = {
				add_idea = navy_spending_level_1
				remove_idea = navy_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = navy_spending_level_3
			}
			swap_ideas = {
				add_idea = navy_spending_level_2
				remove_idea = navy_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = navy_spending_level_4
			}
			swap_ideas = {
				add_idea = navy_spending_level_3
				remove_idea = navy_spending_level_4
			}
		}
		else_if = {
			limit = {
				has_idea = navy_spending_level_5
			}
			swap_ideas = {
				add_idea = navy_spending_level_4
				remove_idea = navy_spending_level_5
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_LOWER_NAVY_SPENDING_LEVEL_TT
	}
}

# example usage:
## increase_slider_navy = yes
increase_slider_navy = {
	if = {
		limit = {
			NOT = { has_idea = navy_spending_level_5 }
		}
		if = {
			limit = {
				has_idea = navy_spending_level_1
			}
			swap_ideas = {
				add_idea = navy_spending_level_2
				remove_idea = navy_spending_level_1
			}
		}
		else_if = {
			limit = {
				has_idea = navy_spending_level_2
			}
			swap_ideas = {
				add_idea = navy_spending_level_3
				remove_idea = navy_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = navy_spending_level_3
			}
			swap_ideas = {
				add_idea = navy_spending_level_4
				remove_idea = navy_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = navy_spending_level_4
			}
			swap_ideas = {
				add_idea = navy_spending_level_5
				remove_idea = navy_spending_level_4
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_INCREASE_NAVY_SPENDING_LEVEL_TT
	}
}

# example usage:
## decrease_slider_road = yes
decrease_slider_road = {
	if = {
		limit = {
			NOT = { has_idea = road_spending_level_1 }
		}
		if = {
			limit = {
				has_idea = road_spending_level_2
			}
			swap_ideas = {
				add_idea = road_spending_level_1
				remove_idea = road_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = road_spending_level_3
			}
			swap_ideas = {
				add_idea = road_spending_level_2
				remove_idea = road_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = road_spending_level_4
			}
			swap_ideas = {
				add_idea = road_spending_level_3
				remove_idea = road_spending_level_4
			}
		}
		else_if = {
			limit = {
				has_idea = road_spending_level_5
			}
			swap_ideas = {
				add_idea = road_spending_level_4
				remove_idea = road_spending_level_5
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_LOWER_ROAD_SPENDING_LEVEL_TT
	}
}

# example usage:
## increase_slider_road = yes
increase_slider_road = {
	if = {
		limit = {
			NOT = { has_idea = road_spending_level_5 }
		}
		if = {
			limit = {
				has_idea = road_spending_level_1
			}
			swap_ideas = {
				add_idea = road_spending_level_2
				remove_idea = road_spending_level_1
			}
		}
		else_if = {
			limit = {
				has_idea = road_spending_level_2
			}
			swap_ideas = {
				add_idea = road_spending_level_3
				remove_idea = road_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = road_spending_level_3
			}
			swap_ideas = {
				add_idea = road_spending_level_4
				remove_idea = road_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = road_spending_level_4
			}
			swap_ideas = {
				add_idea = road_spending_level_5
				remove_idea = road_spending_level_4
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_INCREASE_ROAD_SPENDING_LEVEL_TT
	}
}

# example usage:
## decrease_slider_law = yes
decrease_slider_law = {
	if = {
		limit = {
			NOT = { has_idea = law_spending_level_1 }
		}
		if = {
			limit = {
				has_idea = law_spending_level_2
			}
			swap_ideas = {
				add_idea = law_spending_level_1
				remove_idea = law_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = law_spending_level_3
			}
			swap_ideas = {
				add_idea = law_spending_level_2
				remove_idea = law_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = law_spending_level_4
			}
			swap_ideas = {
				add_idea = law_spending_level_3
				remove_idea = law_spending_level_4
			}
		}
		else_if = {
			limit = {
				has_idea = law_spending_level_5
			}
			swap_ideas = {
				add_idea = law_spending_level_4
				remove_idea = law_spending_level_5
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_LOWER_LAW_SPENDING_LEVEL_TT
	}
}

# example usage:
## increase_slider_law = yes
increase_slider_law = {
	if = {
		limit = {
			NOT = { has_idea = law_spending_level_5 }
		}
		if = {
			limit = {
				has_idea = law_spending_level_1
			}
			swap_ideas = {
				add_idea = law_spending_level_2
				remove_idea = law_spending_level_1
			}
		}
		else_if = {
			limit = {
				has_idea = law_spending_level_2
			}
			swap_ideas = {
				add_idea = law_spending_level_3
				remove_idea = law_spending_level_2
			}
		}
		else_if = {
			limit = {
				has_idea = law_spending_level_3
			}
			swap_ideas = {
				add_idea = law_spending_level_4
				remove_idea = law_spending_level_3
			}
		}
		else_if = {
			limit = {
				has_idea = law_spending_level_4
			}
			swap_ideas = {
				add_idea = law_spending_level_5
				remove_idea = law_spending_level_4
			}
		}
	}
	else = {
		custom_effect_tooltip = CANNOT_INCREASE_LAW_SPENDING_LEVEL_TT
	}
}

# example usage:
## lock_slider_army_spending = yes
lock_slider_army_spending = {
	set_country_flag = army_spending_slider_increase_blocked
	set_country_flag = army_spending_slider_decrease_blocked
}

# example usage:
## lock_slider_army_spending = yes
lock_slider_navy_spending = {
	set_country_flag = navy_spending_slider_increase_blocked
	set_country_flag = navy_spending_slider_decrease_blocked
}

# example usage:
## lock_slider_road_spending = yes
lock_slider_road_spending = {
	set_country_flag = road_spending_slider_increase_blocked
	set_country_flag = road_spending_slider_decrease_blocked
}

# example usage:
## lock_slider_law_spending = yes
lock_slider_law_spending = {
	set_country_flag = law_spending_slider_increase_blocked
	set_country_flag = law_spending_slider_decrease_blocked
}

# example usage:
## lock_slider_research_spending = yes
lock_slider_research_spending = {
	set_country_flag = research_spending_slider_increase_blocked
	set_country_flag = research_spending_slider_decrease_blocked
}

# example usage:
## lock_slider_social_spending = yes
lock_slider_social_spending = {
	set_country_flag = social_spending_slider_increase_blocked
	set_country_flag = social_spending_slider_decrease_blocked
}
# example usage:
## lock_slider_taxes_spending = yes
lock_slider_taxes_spending = {
	set_country_flag = taxes_slider_increase_blocked
	set_country_flag = taxes_slider_decrease_blocked
}



# example usage:
## unlock_slider_army_spending = yes
unlock_slider_army_spending = {
	clr_country_flag = army_spending_slider_increase_blocked
	clr_country_flag = army_spending_slider_decrease_blocked
	custom_effect_tooltip = army_spending_slider_unlocked
}
# example usage:
## unlock_slider_navy_spending = yes
unlock_slider_navy_spending = {
	clr_country_flag = navy_spending_slider_increase_blocked
	clr_country_flag = navy_spending_slider_decrease_blocked
	custom_effect_tooltip = navy_spending_slider_unlocked
}

# example usage:
## unlock_slider_road_spending = yes
unlock_slider_road_spending = {
	clr_country_flag = road_spending_slider_increase_blocked
	clr_country_flag = road_spending_slider_decrease_blocked
	custom_effect_tooltip = road_spending_slider_unlocked
}

# example usage:
## unlock_slider_law_spending = yes
unlock_slider_law_spending = {
	clr_country_flag = law_spending_slider_increase_blocked
	clr_country_flag = law_spending_slider_decrease_blocked
	custom_effect_tooltip = law_spending_slider_unlocked
}

# example usage:
## unlock_slider_research_spending = yes
unlock_slider_research_spending = {
	clr_country_flag = research_spending_slider_increase_blocked
	clr_country_flag = research_spending_slider_decrease_blocked
	custom_effect_tooltip = research_spending_slider_unlocked
}

# example usage:
## unlock_slider_social_spending = yes
unlock_slider_social_spending = {
	clr_country_flag = social_spending_slider_increase_blocked
	clr_country_flag = social_spending_slider_decrease_blocked
	custom_effect_tooltip = social_spending_slider_unlocked
}
# example usage:
## unlock_slider_taxes_spending = yes
unlock_slider_taxes_spending = {
	clr_country_flag = taxes_slider_increase_blocked
	clr_country_flag = taxes_slider_decrease_blocked
	custom_effect_tooltip = tax_spending_slider_unlocked
}