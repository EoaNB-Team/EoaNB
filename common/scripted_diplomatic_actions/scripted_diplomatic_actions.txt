scripted_diplomatic_actions = {

	# alliance_key = { # will be used in most localizations
	
		# allowed = { #if action is valid
		# }
		# visible = { #if action is visible on gui
			# THIS = {
				# is_puppet = no  
			    # is_subject = no 
				# NOT = {
			        # check_variable = { THIS.id = ROOT.id }
		    	    # is_in_array = {
	                    # array = THIS.allies_array
	                    # value = ROOT.id 
                    # }
					# has_war_with = ROOT 
				# }
		    # }
			# ROOT = {
				# is_puppet = no 
			    # is_subject = no 
				# NOT = {
		    	    # is_in_array = {
	                    # array = THIS.allies_array
	                    # value = ROOT.id 
                    # } 
				# }
		    # }
			# NOT={
				# has_game_rule = {
					# rule = allow_alliances
					# option = FOCUSES_ONLY
				# }
			# }
		# }
		# selectable = { #if action is selectable on gui
		# }

		# requires_acceptance = yes # if true the action will require acceptance of target country
		# cost = 0 # pp cost, can be zero
		# command_power = 0 # cp cost, can be zero

		# #cost_string = loc_key # if you have a custom cost, use this loc to display it
		# show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button

		# icon = 1 # icon frame to use in notification

      # #for effects/triggers/variables, ROOT is the sender and this is receiver

		# # runs when the action is sent
		# on_sent_effect = {
		# }

		# # runs when the action is properly sent and accepted
		# complete_effect = {
			# add_to_array = { Root.allies_array = THIS.id }
			# add_to_array = { This.allies_array = ROOT.id }
		# }

		# # runs when the action is properly sent and rejected
		# reject_effect = {
		# }

		# # SEND POPUP CUSTOMIZATION
		# # use diplomatic_action as context in scripted gui
		# #send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action
		# # reset_send_effect = { # if action has a send scripted gui, this effect will be used for clearing the state of gui (will run when player opens the scripted gui by sending the action or when ai proposes action
			# # # clear action
			# # if = {
				# # limit = { 
					# # ROOT = {
						# # is_ai = yes
					# # }
				# # }
				# # # initialize for ai
			# # }
		# # }
		# can_be_sent = { # send button will be disabled if no
			# always = yes
		# }
		# send_description = "Propose an alliance with this country in order to assure mutual protection during crisis and wars." # if there is no scripted gui, this desc will be used in send yes/no pop up


		# # RECEIVE POPUP CUSTOMIZATION
		# # use diplomatic_action as context in scripted gui
		# #receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		# # reset_receive_effect = {
			# # # clear action
			# # if = {
				# # limit = {  
					# # ROOT = {
						# # is_ai = yes
					# # }
				# # }
				# # # change stuff for ai
			# # }
		# # }
		# can_be_accepted = { # accept button will be disabled if no
			# always = yes
		# }
		# receive_description = "[?FROM.GetName] wants to ally with our country." # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# # PLAYER FEEDBACK ON ACCEPT/REJECT
		# accept_title = "Alliance Signed" #can be overridden to customize accepted/rejected pop ups for the sender
		# accept_description = "[?This.GetName] has accepted our offer to ally. The future will be brighter with an honourable ally!"
		# reject_title = "Alliance Rejected"
		# reject_description = "[?This.GetName] has rejected our benevolent offer. It seems that they are not the friends we though they were."
	
		
		# # AI
		# # a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
		# ai_acceptance = {
			# Base = { # name is used for loc
				# base = -50  
				# modifier = {
					# add = -40
					# has_game_rule = {
						# rule = allow_alliances
						# option = LIMITED
					# }
				# }
			# }
			# Puppet = {
			       # base = 0 
				   # modifier = {
				    # add = -1000 
					
					# OR = {
					    # is_puppet = yes 
						# is_subject = yes 
					# }
				    # }
				 
			# }
            # Relations = {
                # base = 0 
				# modifier = {
				    # add = THIS.opinion@ROOT 
				# } 
            # }
            # "Strategic Considerations" = {
                # base = 0 
				    # modifier = {
				        # add = 15   
                        # check_variable = { ROOT.score_array_position_var >  8 }		
                        # check_variable = { 
			                # var = ROOT.score_array_position_var
                            # value = 16 		
			                # compare = less_than_or_equals 
			            # }	
                        # check_variable = { 
			                # var = this.score_array_position_var
                            # value = 16 		
			                # compare = greater_than   
			            # }
                    # }
				    # modifier = {
				        # add = 25  
						# AND = {
                        # check_variable = { 
			                # var = ROOT.score_array_position_var
                            # value = 8		
			                # compare = less_than_or_equals 
			            # }
                        # check_variable = { 
			                # var = this.score_array_position_var
                            # value = 8		
			                # compare = greater_than   
			            # }
						# } 
                    # }	
				    # modifier = {
				        # add = -15    	
                        # check_variable = { 
			                # var = ROOT.score_array_position_var
                            # value = 16 		
			                # compare = greater_than 
			            # }	
                        # check_variable = { 
			                # var = this.score_array_position_var
                            # value = 16 		
			                # compare = less_than_or_equals  
			            # }
                    # }
				    # modifier = {
				        # add = 20     	
                        # check_variable = { ROOT.overall_score > This.overall_score }	
                    # }
				    # modifier = {
				        # add = -20      	
                        # check_variable = { ROOT.overall_score < This.overall_score }	
                    # }	
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = pre_industrial_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = pre_industrial_era
					    	# }	
						# }
                    # }
				    # modifier = {
				        # add = 20       	
                        # check_variable = { this.rival_nation = root.om_rival_country }
                    # }
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = victorian_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = victorian_era
					    	# }	
						# }
                    # }
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = machine_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = machine_era
					    	# }	
						# }
                    # }		
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = oil_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = oil_era
					    	# }	
						# }
                    # }			
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = aviation_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = aviation_era
					    	# }	
						# }
                    # }	
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = modern_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = modern_era
					    	# }	
						# }
                    # }	
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = atomic_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = atomic_era
					    	# }	
						# }
                    # }			
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = information_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = information_era
					    	# }	
						# }
                    # }			
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = digital_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = digital_era
					    	# }	
						# }
                    # }	
				    # modifier = {
				        # add = -15      	
                        # THIS = {
						    # has_idea = post_digital_era
						# }
                        # NOT = {						
                            # ROOT = {
			     			    # has_idea = post_digital_era
					    	# }	
						# }
                    # }
				    # modifier = {
				        # add = 15        	
                        # THIS = {
						    # is_neighbor_of = ROOT 
						# }
                    # }
			        # modifier = { 
					    # factor = 0     
			            # THIS = {
				            # OR = {
				          	    # is_puppet = yes
				        		# is_subject = yes 
					        # }
				        # }
			        # }
			# modifier = {
			    # add = 55 
				# THIS = {
				    # has_war_together_with = ROOT 
				# } 
			# }					
            # }
		    # "Alliance Number" = {
			    # base = 0 
			        # modifier = { 
					    # add = -100  
					    # factor = 0    
                        # OR = {	
                            # AND = {						
							    # check_variable = { root.score_array_position_var < 9 }
			                    # check_variable = { root.allies_array^num > 9 }
							# }
                            # AND = {	
                                # check_variable = { root.score_array_position_var > 8 }							
							    # check_variable = { root.score_array_position_var < 17 }
			                    # check_variable = { root.allies_array^num > 8 }
							# }
                            # AND = {	
                                # check_variable = { root.score_array_position_var > 15 }							
							    # check_variable = { root.score_array_position_var < 41 }
			                    # check_variable = { root.allies_array^num > 5 }
							# }
                            # AND = {							
							    # check_variable = { root.score_array_position_var > 40 }
			                    # check_variable = { root.allies_array^num > 3 }
							# }
						# }
			        # }			
			# }
		# }

		# # ai_will_do to decide if AI should send this action or not
		# ai_desire = {
		    # modifier = {
				# add = -40  
		    # }
		    # modifier = {
				# add = THIS.opinion@ROOT 
		    # }
		    # modifier = {
			    # add = 20       	
                # check_variable = { this.rival_nation = root.om_rival_country }
            # }
		    # modifier = {
				# add = -15     
                # check_variable = { ROOT.score_array_position_var >  8 }		
                # check_variable = { 
		            # var = ROOT.score_array_position_var
                    # value = 16 		
			        # compare = less_than_or_equals 
			    # }	
                # check_variable = { 
			        # var = this.score_array_position_var
                    # value = 16 		
			        # compare = greater_than   
			    # }
            # }
		    # modifier = {
			    # add = -35   
				# AND = {
                    # check_variable = { 
			            # var = ROOT.score_array_position_var
                        # value = 8		
			            # compare = less_than_or_equals 
			        # }
                    # check_variable = { 
			            # var = this.score_array_position_var
                        # value = 8		
			            # compare = greater_than   
			        # }
			    # } 
            # }
	        # modifier = {
				# add = -25    	
                # check_variable = { 
			        # var = ROOT.score_array_position_var
                    # value = 16 		
			        # compare = greater_than 
	            # }	
                # check_variable = { 
                    # var = this.score_array_position_var
                    # value = 16 		
			        # compare = less_than_or_equals  
			    # }
            # }
		    # modifier = {
		        # add = 20     	
                # check_variable = { ROOT.overall_score > This.overall_score }	
            # }
		    # modifier = {
			    # add = -25       	
                # check_variable = { ROOT.overall_score < This.overall_score }	
            # }				
		    # modifier = {
				# add = -1000 
					
			    # OR = {
				    # is_puppet = yes 
				    # is_subject = yes 
				# }
		    # }
		    # modifier = {
				# add = -15      	
                # THIS = {
                    # has_idea = pre_industrial_era
				# }
                # NOT = {						
                    # ROOT = {
			     	    # has_idea = pre_industrial_era
					# }	
				# }
            # }
		    # modifier = {
				# add = -15      	
                # THIS = {
					# has_idea = victorian_era
				# }
                # NOT = {						
                    # ROOT = {
			     		# has_idea = victorian_era
					# }	
				# }
            # }
		    # modifier = {
				# add = -15      	
                # THIS = {
					# has_idea = machine_era
				# }
                # NOT = {						
                    # ROOT = {
			     		# has_idea = machine_era
					# }	
                # }
            # }		
		    # modifier = {
				# add = -15      	
                # THIS = {
					# has_idea = oil_era
				# }
                # NOT = {						
                    # ROOT = {
			     		# has_idea = oil_era
					# }	
				# }
            # }			
		    # modifier = {
				# add = -15      	
                # THIS = {
					# has_idea = aviation_era
				# }
                # NOT = {						
                    # ROOT = {
			     		# has_idea = aviation_era
					# }	
				# }
            # }	
			# modifier = {
				# add = -15      	
                # THIS = {
				    # has_idea = modern_era
				# }
                # NOT = {						
                    # ROOT = {
			     		# has_idea = modern_era
					# }	
				# }
            # }	
			# modifier = {
				# add = -15      	
                # THIS = {
						    # has_idea = atomic_era
				# }
                # NOT = {						
                    # ROOT = {
			     	    # has_idea = atomic_era
					# }	
				# }
            # }			
			# modifier = {
				# add = -15      	
                # THIS = {
				    # has_idea = information_era
				# }
                # NOT = {						
                    # ROOT = {
			     			# has_idea = information_era
					# }	
				# }
            # }			
		    # modifier = {
				# add = -15      	
                # THIS = {
				    # has_idea = digital_era
				# }
                # NOT = {						
                    # ROOT = {
			     	    # has_idea = digital_era
					# }	
				# }
            # }	
		    # modifier = {
				# add = -15      	
                # THIS = {
					# has_idea = post_digital_era
				# }
                # NOT = {						
                    # ROOT = {
			     	    # has_idea = post_digital_era
					# }	
				# }
            # }			
			# modifier = {
			    # add = 55 
				# THIS = {
				    # has_war_together_with = ROOT 
				# } 
			# }
		   # modifier = {
			    # add = 15        	
                # THIS = {
					# is_neighbor_of = ROOT 
				# }
            # }
		# }
	# }
	
	# alliance_break_key = { # will be used in most localizations
	
		# allowed = { #if action is valid
		    # always = yes 
		# }
		# visible = { #if action is visible on gui
				# is_puppet = no  
				# is_subject = no 
		    	# is_in_array = {
	                # array = THIS.allies_array
	                # value = ROOT.id 
                # }		
		    	# is_in_array = {
	                # array = ROOT.allies_array
	                # value = THIS.id 
                # }	
				# THIS = {
				    # NOT = {
			            # check_variable = { THIS.id = ROOT.id }
				    # }
					# has_war = no 
				# }
		# }
		# selectable = { #if action is selectable on gui
		    # always = yes 
		# }

		# requires_acceptance = no # if true the action will require acceptance of target country
		# cost = 0 # pp cost, can be zero
		# command_power = 0 # cp cost, can be zero

		# #cost_string = loc_key # if you have a custom cost, use this loc to display it
		# show_acceptance_on_action_button = no # set to no if acceptance shouldn't be displayed on the action button

		# icon = 1 # icon frame to use in notification

      # #for effects/triggers/variables, ROOT is the sender and this is receiver

		# # runs when the action is sent
		# on_sent_effect = {
			# remove_from_array = { Root.allies_array = THIS.id }
		    # remove_from_array = { This.allies_array = ROOT.id }
		# }

		# # runs when the action is properly sent and accepted
		# complete_effect = { 
		    # remove_from_array = { Root.allies_array = THIS.id }
		    # remove_from_array = { This.allies_array = ROOT.id }
		# }

		# # runs when the action is properly sent and rejected
		# reject_effect = {
		# }

		# # SEND POPUP CUSTOMIZATION
		# # use diplomatic_action as context in scripted gui
		# #send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action
		# # reset_send_effect = { # if action has a send scripted gui, this effect will be used for clearing the state of gui (will run when player opens the scripted gui by sending the action or when ai proposes action
			# # # clear action
			# # if = {
				# # limit = { 
					# # ROOT = {
						# # is_ai = yes
					# # }
				# # }
				# # # initialize for ai
			# # }
		# # }
		# can_be_sent = { # send button will be disabled if no
			# always = yes
		# }
		# send_description = "Break our alliance with this country. This will negatively impact our relations." # if there is no scripted gui, this desc will be used in send yes/no pop up


		# # RECEIVE POPUP CUSTOMIZATION
		# # use diplomatic_action as context in scripted gui
		# #receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		# # reset_receive_effect = {
			# # # clear action
			# # if = {
				# # limit = {  
					# # ROOT = {
						# # is_ai = yes
					# # }
				# # }
				# # # change stuff for ai
			# # }
		# # }
		# can_be_accepted = { # accept button will be disabled if no
			# always = yes
		# }
		# receive_description = "[ROOT.GetName] has cancelled their alliance with us. This only means they're planning something..." # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# # PLAYER FEEDBACK ON ACCEPT/REJECT
		# accept_title = loc_key #can be overridden to customize accepted/rejected pop ups for the sender
		# accept_description = loc_key
		# reject_title = loc_key
		# reject_description = loc_key
	
		
		# # AI
		# # a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
		# ai_acceptance = {
		# }

		# # ai_will_do to decide if AI should send this action or not
		# ai_desire = {			
		# }
	# }
	
	# alliance_call_ally_key = { # will be used in most localizations
	
		# allowed = { #if action is valid
		# }
		# visible = { #if action is visible on gui
		        # ROOT = {
				    # has_war = yes
				# }
				# is_puppet = no  
				# is_subject = no 
		    	# is_in_array = {
	                # array = THIS.allies_array
	                # value = ROOT.id 
                # }		
		    	# is_in_array = {
	                # array = ROOT.allies_array
	                # value = THIS.id 
                # }	
				# THIS = {
				    # NOT = {
			            # check_variable = { THIS.id = ROOT.id }
						# has_war_together_with = ROOT
				    # }  
				# } 
		# }
		# selectable = { #if action is selectable on gui
		# }

		# requires_acceptance = yes # if true the action will require acceptance of target country
		# cost = 0 # pp cost, can be zero
		# command_power = 0 # cp cost, can be zero

		# #cost_string = loc_key # if you have a custom cost, use this loc to display it
		# show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button

		# icon = 1 # icon frame to use in notification

      # #for effects/triggers/variables, ROOT is the sender and this is receiver

		# # runs when the action is sent
		# on_sent_effect = {
		# }

		# # runs when the action is properly sent and accepted
		# complete_effect = {	
            # THIS = {	
			    # set_temp_variable = { length_temp = enemies_array_call_temp^num }
                # for_loop_effect = {
                    # start = 0
                    # end = length_temp 
                    # add = 1
                    # value = v
                    # break = b
                        
					# declare_war_on = {
                        # target = this.enemies_array_call_temp^v      
                        # type = annex_everything
                    # }	
                # }
                # clear_array = enemies_array_call_temp  				
	        # }
            # set_temp_variable = { show_button = 1 }
            # subtract_from_temp_variable = { show_button = show_call_allies_var  }
            # set_variable = { show_call_allies_var = show_button }
        # }			

		# # runs when the action is properly sent and rejected
		# reject_effect = {
		# }

		# # SEND POPUP CUSTOMIZATION
		# # use diplomatic_action as context in scripted gui
		 # send_scripted_gui = "call_allies_gui" 
		 # reset_send_effect = { 
            # set_temp_variable = { show_button = 1 }
            # subtract_from_temp_variable = { show_button = show_call_allies_var  }
            # set_variable = { show_call_allies_var = show_button }
		# }
		# can_be_sent = { # send button will be disabled if no
			# always = yes
		# }
		# send_description = "2" # if there is no scripted gui, this desc will be used in send yes/no pop up


		# # RECEIVE POPUP CUSTOMIZATION
		# # use diplomatic_action as context in scripted gui
		# #receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		# # reset_receive_effect = {
			# # # clear action
			# # if = {
				# # limit = {  
					# # ROOT = {
						# # is_ai = yes
					# # }
				# # }
				# # # change stuff for ai
			# # }
		# # }
		# can_be_accepted = { # accept button will be disabled if no
			# always = yes
		# }
		# receive_description = "Hello" # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# # PLAYER FEEDBACK ON ACCEPT/REJECT
		# accept_title = "Call to Arms Accepted" #can be overridden to customize accepted/rejected pop ups for the sender
		# accept_description = "[THIS.GetName] has accepted our call-of-arms. They have very wisely done so."
		# reject_title = "Call to Arms Rejected"
		# reject_description = "[This.GetName] has rejected our call-of-arms. They are but scoundrels and have no honour."
	
		
		# # AI
		# # a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
		# ai_acceptance = {
		# }

		# # ai_will_do to decide if AI should send this action or not
		# ai_desire = {
            # modifier = {
			    # add = 1000  
			# }		
		# }
	# }
	 
	
    ######### Justify and Declare War #######
	
	# justify_wargoal_key = { # will be used in most localizations
	
		# allowed = { 
		# }
		# visible = { #if action is visible on gui
		# } 
		# selectable = { #if action is selectable on gui
		# }

		# requires_acceptance = no # if true the action will require acceptance of target country
		# cost = 100 # pp cost, can be zero
		# command_power = 0 # cp cost, can be zero

		# #cost_string = loc_key # if you have a custom cost, use this loc to display it
		# show_acceptance_on_action_button = no # set to no if acceptance shouldn't be displayed on the action button

		# icon = 1 # icon frame to use in notification


		# on_sent_effect = {
            # set_temp_variable = { show_button = 1 }
            # subtract_from_temp_variable = { show_button = show_justify_war_var  }
            # set_variable = { show_justify_war_var = show_button }
			# eoanb_war_goals_calc = yes 
		# }

		# complete_effect = {	
        # }			

		# # runs when the action is properly sent and rejected
		# reject_effect = {
		# }

		# # SEND POPUP CUSTOMIZATION
		# # use diplomatic_action as context in scripted gui
		# send_scripted_gui = "justify_wargoal_gui" 
	    # reset_send_effect = {
            # set_temp_variable = { show_button = 1 }
            # subtract_from_temp_variable = { show_button = show_justify_war_var  }
            # set_variable = { show_justify_war_var = show_button }
		# }
		# can_be_sent = { # send button will be disabled if no
			# always = yes
		# }
		# send_description = "2" # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# can_be_accepted = { # accept button will be disabled if no
			# always = yes
		# }
		# receive_description = "Hello" #

		
		# # PLAYER FEEDBACK ON ACCEPT/REJECT
		# accept_title = "" 
		# accept_description = ""
		# reject_title = ""
		# reject_description = ""
	
		
		# # AI
		# # a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
		# ai_acceptance = {
		# }

		# # ai_will_do to decide if AI should send this action or not
		# ai_desire = {	
		# }
	# }	
	
	# declare_war_key = { # will be used in most localizations
	
		# allowed = { 
		# }
		# visible = { #if action is visible on gui
		# } 
		# selectable = { #if action is selectable on gui
		# }

		# requires_acceptance = no # if true the action will require acceptance of target country
		# cost = 100 # pp cost, can be zero
		# command_power = 0 # cp cost, can be zero

		# #cost_string = loc_key # if you have a custom cost, use this loc to display it
		# show_acceptance_on_action_button = no # set to no if acceptance shouldn't be displayed on the action button

		# icon = 1 # icon frame to use in notification


		# on_sent_effect = {
		# }

		# complete_effect = {	
        # }			

		# # runs when the action is properly sent and rejected
		# reject_effect = {
		# }

		# # SEND POPUP CUSTOMIZATION
		# # use diplomatic_action as context in scripted gui
		# # send_scripted_gui = "" 
	    # reset_send_effect = {
		# }
		# can_be_sent = { # send button will be disabled if no
			# always = yes
		# }
		# send_description = "2" # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# can_be_accepted = { # accept button will be disabled if no
			# always = yes
		# }
		# receive_description = "Hello" #

		
		# # PLAYER FEEDBACK ON ACCEPT/REJECT
		# accept_title = "" 
		# accept_description = ""
		# reject_title = ""
		# reject_description = ""
	
		
		# # AI
		# # a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
		# ai_acceptance = {
		# }

		# # ai_will_do to decide if AI should send this action or not
		# ai_desire = {	
		# }
	# }	
}
